{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First set's results: Not linearly separable\n",
      "Second set's results: Not linearly separable\n",
      "Thrid set's results: the w vector is [ 3.  9. -5. -5. -1.]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "\n",
    "\n",
    "set1 = np.matrix([[0,1,0,1],\n",
    "                   [0,1,1,1],\n",
    "                   [1,0,0,1],\n",
    "                   [1,1,1,1],\n",
    "                   \n",
    "                   [1,0,1,1],\n",
    "                   [0,0,0,1],\n",
    "                   [1,1,0,1],\n",
    "                   [0,0,1,1]])\n",
    "\n",
    "set2 = np.matrix([[0,1,1,1],\n",
    "                  [1,0,0,1],\n",
    "                  [1,1,0,1],\n",
    "                  [1,1,1,1],\n",
    "                   \n",
    "                  [1,0,1,1],\n",
    "                  [0,1,0,1],\n",
    "                  [0,0,1,1],\n",
    "                  [0,0,0,1]])\n",
    "\n",
    "set3 = np.matrix([[0,1,0,0,1],\n",
    "                  [0,1,0,1,1],\n",
    "                  [0,1,1,0,1],\n",
    "                  [1,0,0,0,1],\n",
    "                  [1,1,0,0,1],\n",
    "                  [1,1,0,1,1],\n",
    "                  [1,1,1,0,1],\n",
    "                  [1,1,1,1,1],\n",
    "                  \n",
    "                  [1,0,1,1,1],\n",
    "                  [1,0,1,0,1],\n",
    "                  [1,0,0,1,1],\n",
    "                  [0,1,1,1,1],\n",
    "                  [0,0,1,1,1],\n",
    "                  [0,0,1,0,1],\n",
    "                  [0,0,0,1,1],\n",
    "                  [0,0,0,0,1]])\n",
    "\n",
    "\n",
    "def preceptron_alg(points):\n",
    "    w = np.zeros(points.shape[1])\n",
    "    changed = True\n",
    "    attempts = 0\n",
    "    \n",
    "    while changed:\n",
    "        #For each point in the set\n",
    "        for i in range(0,points.shape[0]):\n",
    "            #Check if point dot w is 0\n",
    "            if i < points.shape[0]//2:\n",
    "                sign = 1\n",
    "            else:\n",
    "                sign = -1\n",
    "            \n",
    "            if (np.dot(points[i]*sign,w)) <= 0:\n",
    "                #Update the w\n",
    "                w = (w + points[i]*sign)\n",
    "                w = np.squeeze(np.asarray(w))\n",
    "                attempts = attempts+1\n",
    "                break\n",
    "                \n",
    "            #If we've reach the last point and passed break\n",
    "            if i == points.shape[0]-1:\n",
    "                changed = False\n",
    "                \n",
    "        #Check upper bound of n^2 to break\n",
    "        if attempts > (points.shape[0]**2):\n",
    "            return \"Not linearly separable\"\n",
    "        \n",
    "    return(\"the w vector is \" + str(w))\n",
    "        \n",
    "print(\"First set's results: \" + preceptron_alg(set1))\n",
    "print(\"Second set's results: \" + preceptron_alg(set2))\n",
    "print(\"Thrid set's results: \" + preceptron_alg(set3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
